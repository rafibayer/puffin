// Author: Rafael Bayer (2021)
//
// This file describes a PEG grammar to parse the Puffin Programming Language.
// Specifically, this file is used by the Rust Crate "pest" to generate the parser.


// global rules, implicit whitespace, and comments.
// both are silent, and produce no tokens
WHITESPACE = _{ " " | "\t" | "\r" | "\n" }
// Comments are anything following "//" until the end of the line
COMMENT = _{ "//" ~ (!"\n" ~ ANY)* }


// program: 0 or more statements, taking the whole file
program = { SOI ~ statement* ~ EOI }

// statement: returns, assigns, expressions, or nests
statement = {
    return_statement ~ ";" |
    assign_statement ~ ";" |
    exp ~ ";" |
    nest
}

    return_statement = { "return" ~ exp }

    // assignment, can be augmented by certain operators
    assign_statement = { exp ~ aug? ~ "=" ~ exp }
        // assignment augmentation operators
        aug = {
            "+" |
            "-" |
            "*" |
            "/" |
            "%" 
        }

// Expressions
exp = {
    comparison |
    paren
}

paren = { "(" ~ exp ~ ")" }

// depth first, so reverse precedence order 
// https://en.wikipedia.org/wiki/Parsing_expression_grammar#Examples
// https://pest.rs/book/intro.html
comparison = _{ logical ~ (comp_op ~ (logical | paren))*}
logical = _{ sum ~ (log_op ~ (sum | paren))*}
sum = _{ product ~ (sum_op ~ (product | paren))* }
product = _{ unary ~ (mul_op ~ (unary | paren))* }
unary = _{ un_op? ~ (postfix | paren) }
postfix = _{ (value | paren) ~ post_op* }
value = { paren | structure | function | num | string | array_init | null | name }

// logical operators
log_op = {
    "||" |
    "&&"
}

// comparison operators
comp_op = {
    "<=" |
    "<" |
    ">=" |
    ">" |
    "==" |
    "!=" 
}

// sum operators
sum_op = {
    "-" |
    "+" 
}

// multiplicative operators
mul_op = {
    "/" |
    "%" |
    "*" 
}

// unary (prefix) operators
un_op = {
    "!" |
    "-"
}

// postfix operators
post_op = {
    subscript |
    call |
    dot
}
    // array subscripting
    subscript = { "[" ~ exp ~ "]" }
    // function call
    call = { "(" ~ exps ~ ")" }
    // structure access
    dot = { "." ~ name }


// numerical literal
num = @{ ASCII_DIGIT+ ~ ("." ~ ASCII_DIGIT+)? }

// names: start with letter, followed by alphanumeric or _'s
name = @{ ASCII_ALPHA ~ (ASCII_ALPHANUMERIC | "_")* }

// structures are composed of fields
structure = { "{" ~ fields* ~ "}"}
    fields = _{ field ~ "," ~ fields | field }
    // each field is a name, followed by its value
    field = { name ~ ":" ~ exp }

// strings are any collection of characters between double-quotes
string = @{ "\"" ~ (!"\"" ~ ANY)* ~ "\"" }

// array initialization
array_init = { "[" ~ (range_init | sized_init ) ~ "]" }
    // array 
    range_init = { exp ~ ":" ~ exp  }
    sized_init = { exp }

// null literal keyword
null = { "null" }

// nested block
block = { "{" ~ statement* ~ "}"}

// function definition, "fn" followed by 0 or more arg names followed by function body
// alternate definition, "fn" followed by 0 or more arg names, followed by single exp
function = { "fn" ~ "(" ~ args ~ ")" ~ ( block | lambda ) }
    lambda = { "=>" ~ exp }
    args = _{ name ~ "," ~ args | name | "" }
    exps = _{ exp ~ "," ~ exps | exp | "" }


// nest: conditionals or loops
nest = {
    condnest |
    loopnest
}

    // conditionals: if else or if
    condnest = {
        if_else_block |
        if_block
    }

        if_block = { ("if" ~ "(" ~ exp ~ ")" ~ block) }
        if_else_block = { ("if" ~ "(" ~ exp ~ ")" ~ block ~ "else" ~ block) }

    // loops: while or for-loop
    loopnest = {
        while_block |
        for_in_block |
        for_block
    }

        while_block = { ("while" ~ exp ~ block) }
        // for-in/foreach
        for_in_block = { "for" ~ "(" ~ name ~ "in" ~ exp ~ ")" ~ block }
        // traditional C-style for-loop
        for_block = { ("for" ~ "(" ~ statement ~ exp ~ ";" ~ (assign_statement | exp) ~ ")" ~ block) }


