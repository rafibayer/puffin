// global rules, implict whitespace, and comments
WHITESPACE = _{ " " | "\t" | "\r" | "\n" }
COMMENT = _{ "//" ~ (!"\n" ~ ANY)* }

// names: start with letter, followed by alphanumeric or _'s
name = @{ ASCII_ALPHA ~ (ASCII_ALPHANUMERIC | "_")* }

// program: 0 or more statements, taking the whole file
program = { SOI ~ statement* ~ EOI }

// statement: returns, assigns, expressions, or nests
statement = {
    return_statment ~ ";" |
    assign_statment ~ ";" |
    exp ~ ";" |
    nest
}

return_statment = { "return" ~ exp }
assign_statment = { exp ~ "=" ~ exp }

exp = {
    comparison ~ post_op* |
    comparison |
    paren
}

paren = { "(" ~ exp ~ ")" }

// reverse precedence order 
// https://en.wikipedia.org/wiki/Parsing_expression_grammar#Examples
// https://pest.rs/book/intro.html
comparison = _{ logical ~ (comp_op ~ (logical | paren))*}
logical = _{ sum ~ (log_op ~ (sum | paren))*}
sum = _{ product ~ (sum_op ~ (product | paren))* }
product = _{ unary ~ (mul_op ~ (unary | paren))* }
unary = _{ un_op? ~ (postfix | paren) }
postfix = _{ (value | paren) ~ post_op? }
value = { paren | structure | function | num | string | array_init | name }

log_op = {
    "||" |
    "&&"
}

comp_op = {
    "<" |
    "<=" |
    ">" |
    ">=" |
    "==" |
    "!=" 
}

sum_op = {
    "-" |
    "+" 
}

mul_op = {
    "/" |
    "%" |
    "*" 
}

un_op = {
    "!" |
    "-"
}

post_op = {
    subscript |
    call |
    dot
}
    subscript = { "[" ~ exp ~ "]" }
    call = { "(" ~ exps ~ ")" }
    dot = { "." ~ name }

// numerical literal
num = @{ ASCII_DIGIT+ ~ ("." ~ ASCII_DIGIT+)? }

structure = { "{" ~ fields* ~ "}"}
fields = _{ field ~ "," ~ fields | field }
field = { name ~ ":" ~ exp }

string = @{ "\"" ~ (!"\"" ~ ANY)* ~ "\"" }

array_init = { "[" ~ exp ~ "]" }

// function definition, "fn" followed by 0 or more arg names followed by function body
function = { "fn" ~ "(" ~ args ~ ")" ~ block }
    args = _{ name ~ "," ~ args | name | "" }
    exps = _{ exp ~ "," ~ exps | exp | "" }

block = { "{" ~ statement* ~ "}"}

// nest: conditionals or loops
nest = {
    condnest |
    loopnest
}

    // conditionals: ifelse or if
    condnest = {
        if_else_block |
        if_block
    }

        if_block = { ("if" ~ "(" ~ exp ~ ")" ~ block) }
        if_else_block = { ("if" ~ "(" ~ exp ~ ")" ~ block ~ "else" ~ block) }

    // loops: while or for-loop
    loopnest = {
        while_block |
        for_block
    }

        while_block = { ("while" ~ exp ~ block) }
        for_block = { ("for" ~ "(" ~ statement ~ exp ~ ";" ~ (assign_statment | exp) ~ ")" ~ block) }


