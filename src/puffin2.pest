// global rules, implict whitespace, and comments
WHITESPACE = _{ " " | "\t" | "\r" | "\n" }
COMMENT = _{ "//" ~ (!"\n" ~ ANY)* }

// names: start with letter, followed by alphanumeric or _'s
name = @{ ASCII_ALPHA ~ (ASCII_ALPHANUMERIC | "_")* }

// program: 0 or more statements, taking the whole file
program = { SOI ~ statement* ~ EOI }

// statement: returns, assigns, expressions, or nests
statement = {
    return_statment ~ ";" |
    assign_statment ~ ";" |
    exp ~ ";" |
    nest
}

return_statment = { "return" ~ exp }
assign_statment = { exp ~ "=" ~ exp }

exp = {
    comparison |
    paren
}

paren = { "(" ~ exp ~ ")" }

// reverse precedence order 
comparison = _{ logical ~ (("<" | "<=" | ">" | ">=" | "==" | "!=" ) ~ (logical | paren))*}
logical = _{ sum ~ (("||" | "&&" ) ~ (sum | paren))*}
sum = _{ product ~ (( "+" | "-" ) ~ (product | paren))* }
product = _{ unary ~ (("*" | "/" | "%") ~ (unary | paren))* }
unary = _{ unop? ~ (access | paren) }
access = _{ (call | paren) ~ ("[" ~ exp ~ "]")? }
call = _{ (value | paren) ~ ("(" ~ exp ~ ")")? }
value = { ("(" ~ value ~ ")") | function | function_call | array_index | num | string | array_init | name }

rightop = {
    ("[" ~ exp ~ "]") |
    ("(" ~ exps ~ ")") |
    ("." ~ name)
}

unop = {
    "!" |
    "-"
}

// numerical literal
num = @{ ASCII_DIGIT+ ~ ("." ~ ASCII_DIGIT+)? }

structure = { "{" ~ field* ~ "}"}
field = { name ~ ":" ~ exp }

string = @{ "\"" ~ (!"\"" ~ ANY)* ~ "\"" }

array_init = { "[" ~ exp ~ "]" }
array_index = { (function_call | ("(" ~ exp ~ ")") | name) ~ "[" ~ exp ~ "]" }

// function definition, "fn" followed by 0 or more arg names followed by function body
function = { "fn" ~ "(" ~ args ~ ")" ~ block }
    function_call = { callable ~ "(" ~ exps ~ ")" }
        callable = { ("(" ~ exp ~ ")") | name }
    args = { name ~ "," ~ args | name | "" }
    exps = { exp ~ "," ~ exps | exp | "" }

block = { "{" ~ statement* ~ "}"}

// nest: conditionals or loops
nest = {
    condnest |
    loopnest
}

    // conditionals: ifelse or if
    condnest = {
        if_else_block |
        if_block
    }

        if_block = { ("if" ~ "(" ~ exp ~ ")" ~ block) }
        if_else_block = { ("if" ~ "(" ~ exp ~ ")" ~ block ~ "else" ~ block) }

    // loops: while or for-loop
    loopnest = {
        while_block |
        for_block
    }

        while_block = { ("while" ~ exp ~ block) }
        for_block = { ("for" ~ "(" ~ statement ~ exp ~ ";" ~ (assign_statment | exp) ~ ")" ~ block) }


